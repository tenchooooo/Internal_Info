/*global $*/
// 「this」は、イベントが発生した要素のみへんかさせたいときに使います。
// 実際にコードを記述して、thisを試してみましょう。
// 正方形をクリックしたときに、その正方形のみslideUpして消えるアニメーションです。

// $(function(){
  // $('.bg1').on('click', function(){
    // $('.bg1').slideUp();
  // });
  // $('.bg2').on('click', function(){
    // $('.bg2').slideUp();
  // });
  // $('.bg3').on('click', function(){
    // $('.bg3').slideUp();
  // });
  // $('.bg4').on('click', function(){
    // $('.bg4').slideUp();
  // });
// })

// この書き方では、同じ動作をさせるのにclass名のみ異なるイベントを4つも記述しなければならず、少し面倒です。
// 多くのアニメーションをさせたいときは、さらに煩雑で分かりにくくなってしまいます。
// そんな時便利なのがthisです。
// thisを利用すると、コードをシンプルにまとめることができます。

// $(function(){
  // $('.box1').on('click', function(){
    // $(this).slideUp();
  // });
// });

// かなりシンプルで短くなりました。
// thisは、「クリックされた要素」を指しています。
// 前のコードでは、それぞれの正方形に個別にclass属性を指定していました。
// 今回のコードでは、「box1クラスの正方形がクリックされたとき、this（クリックされた要素）のみslidUpさせる」
// という設定になります。
// thisを使うと、このように多くの処理をまとめて書くことができて、とても便利です。
// ただし、コード上からでは、何をクリックしたときに動作するのか判別しにくいデメリットもあります。

// thisを使うメリットとデメリットをよく理科愛したうえで、利用するようにしましょう。


// 「children」は、HTML要素直下のすべての子要素を取得するときに使います。




